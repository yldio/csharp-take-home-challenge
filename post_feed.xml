<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html" version="2.0">
  <channel>
    <title>
      <![CDATA[ Trainline’s Team Blog - Medium ]]>
    </title>
    <description>
      <![CDATA[ Trainline’s Team Blog: Meet the team behind Europe’s leading train and bus app - Medium ]]>
    </description>
    <link>https://engineering.thetrainline.com?source=rss----f07861640744---4</link>
    <image>
      <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
      <title>Trainline’s Team Blog - Medium</title>
      <link>https://engineering.thetrainline.com?source=rss----f07861640744---4</link>
    </image>
    <generator>Medium</generator>
    <lastBuildDate>Fri, 29 Jan 2021 16:38:01 GMT</lastBuildDate>
    <atom:link href="https://engineering.thetrainline.com/feed" rel="self" type="application/rss+xml"/>
    <webMaster>
      <![CDATA[ yourfriends@medium.com ]]>
    </webMaster>
    <atom:link href="http://medium.superfeedr.com" rel="hub"/>
    <item>
      <title>
        <![CDATA[ Meet Kronos: Trainline’s real-time data product platform and team ]]>
      </title>
      <description>
        <![CDATA[ <div class="medium-feed-item"><p class="medium-feed-image"><a href="https://engineering.thetrainline.com/meet-kronos-trainlines-real-time-data-product-platform-and-team-f4b3dbe663ec?source=rss----f07861640744---4"><img src="https://cdn-images-1.medium.com/max/1866/1*OvGRyfcEcpU1jsb_qJKK5Q.png" width="1866"></a></p><p class="medium-feed-snippet">Making our data run on time</p><p class="medium-feed-link"><a href="https://engineering.thetrainline.com/meet-kronos-trainlines-real-time-data-product-platform-and-team-f4b3dbe663ec?source=rss----f07861640744---4">Continue reading on Trainline’s Team Blog »</a></p></div> ]]>
      </description>
      <link>https://engineering.thetrainline.com/meet-kronos-trainlines-real-time-data-product-platform-and-team-f4b3dbe663ec?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/f4b3dbe663ec</guid>
      <category>
        <![CDATA[ data ]]>
      </category>
      <category>
        <![CDATA[ data-engineering ]]>
      </category>
      <category>
        <![CDATA[ data-science ]]>
      </category>
      <category>
        <![CDATA[ cross-team-collaboration ]]>
      </category>
      <category>
        <![CDATA[ towards-data-science ]]>
      </category>
      <dc:creator>
        <![CDATA[ Jan Teichmann ]]>
      </dc:creator>
      <pubDate>Tue, 26 Jan 2021 11:24:51 GMT</pubDate>
      <atom:updated>2021-01-26T11:29:53.829Z</atom:updated>
    </item>
    <item>
      <title>
        <![CDATA[ Building a data lake: from batch to real-time using Kafka ]]>
      </title>
      <link>https://engineering.thetrainline.com/building-a-data-lake-from-batch-to-real-time-using-kafka-67272041b124?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/67272041b124</guid>
      <category>
        <![CDATA[ data-engineering ]]>
      </category>
      <category>
        <![CDATA[ aws ]]>
      </category>
      <category>
        <![CDATA[ kafka ]]>
      </category>
      <category>
        <![CDATA[ data ]]>
      </category>
      <dc:creator>
        <![CDATA[ Andrey Fadeev ]]>
      </dc:creator>
      <pubDate>Tue, 26 Jan 2021 11:14:45 GMT</pubDate>
      <atom:updated>2021-01-26T11:27:01.425Z</atom:updated>
      <content:encoded>
        <![CDATA[ <p>We know having a single place to store and query all available data (a data lake) is a critical requirement in the modern world but approaches to building and maintaining one are different. From the start, at Trainline we had a batch approach to building DL (with daily updates). It had its own is ]]>
        <![CDATA[ sues and benefits but no matter how good and polished it became, the modern requirement from most customers remained to get data as fast as possible — and that’s not easy in batch world.</p><p>This is how data flow looks at Trainline, as well as how we have replaced most of batch processing with Kafka.</p><p><strong>How does the data flow look?</strong></p><p>As a data engineering team at Trainline, we are responsible for receiving and storing data, processing it, sending it to other teams and maintaining a data lake which is accessible by various consumers including BI and Data Science.</p><p>AWS architecture in Trainline consists of multiple AWS accounts, for example, production, staging, testing, as well as a specific data account which is dedicated to maintaining the data lake. All data is stored in one account, so it’s easier to maintain access policies and permissions.</p><p><strong>Part 1. Vortex</strong></p><p>The first service in the data pipeline is an HTTP API (called Vortex) to receive events from other teams. It has two responsibilities:</p><ul><li>Validate a JSON event that is pushed according to JSON schema</li><li>If event is valid to JSON schema, write it to output Kinesis Stream</li></ul><p>Vortex uses a separate service called Schema Registry where JSON schemas are stored. For example, if anyone wants to send an event with schema MyEvent and version 1.0.0, it should exist in Schema Registry. To update Schema Registry, we have a git repository to store all schemas and a PR to that repo allows other teams to register their schemas.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/731/1*j4kqF0DolStKCsS56l1rTA.png" /></figure><p>The next step is pushing data to the data account. We are using AWS Kinesis streams to do that as it’s easy to set up cross-account permission to read streams from another AWS account.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/992/1*gj-pZtvTp2IWuNr4rUXIyw.png" /></figure><p><strong>Part 2. Hermes</strong></p><p>The next service in the pipeline is a routing service (called Hermes), it reads Kinesis stream(s) and pushes data to multiple configurable destinations:</p><ul><li>SQS: we can configure to push some events to specific SQS queues so consumer teams can receive data in real time.</li><li>S3: all events are written as raw events (compressed JSON files) in an S3 “acquired” bucket, so we always have an option to backfill or reprocess data that we’ve received at some point.</li><li>Kafka</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/541/1*MPD02yx9Lj7hfYqf0YYGWg.png" /></figure><p><strong>Part 2.1. Batch Processing</strong></p><p>In batch world, the main responsibility of Hermes was to write data to an acquired S3 bucket: this data was picked by daily Airflow runs, transformed and written to a data lake S3 bucket. Now the most exciting path of data is to Kafka, which makes all data available in real-time inside a Kafka cluster (so new data products can be created), as well as pushing data to Data Lake — so both are using the same data source.</p><p><strong>Part 3. Kafka</strong></p><p>As a small team, to reduce DevOps work, we decided to use AWS-managed Kafka MSK.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/671/1*9f4yeBV67r6d1fR8Yjp2sA.png" /></figure><p><strong>Part 3.1. Whirlwind</strong></p><p>Hermes writes all events to an “acquired” Kafka topic. The Kafka stream application that reads this topic is called Whirlwind. It reads all incoming events and applies transformations. The Schema Registry service which stores Vortex JSON schemas, also stores files (called blueprints) which describe transformation done in Whirlwind, as well as mappings between JSON schema and a blueprint.</p><p>Usage of these transformations are usually in one of these groups:</p><ul><li>A simple mapping between an incoming JSON event to output a flat structure</li><li>A more complex transformation with custom aggregations to reduce computation cost in downstream jobs, or to reduce output storage size</li></ul><p><strong>Part 3.2 Conduit</strong></p><p>The output of Whirlwind is a bunch of Kafka topics named, for example, ‘ingested.private.TableName’, and Conduit is a Kafka consumer that reads all these topics by a pattern.</p><p>The logic of the app is to read events from all topics, batch them in files locally until the file is more than a configured size in megabytes or is sitting on disk longer than N minutes. When it’s time to load a file, it’s converted from Avro to Parquet format, pushed to S3 location and the last processed offset in that Kafka topic partition is committed. As we have consistent file naming and Kafka offset is committed only after upload is done, we basically have exactly one delivery guarantee: if there is an error, the consumer starts from a previously committed offset so we don’t lose data, but if some files were already written to S3, they will just be overwritten so we don’t have duplicates.</p><p><strong>Part 3.3 Conduit Batch</strong></p><p>In main Data Lake we have partitions by event_time (which is a part of a JSON event that we receive, and it essentially means the business time of the event) but as we don’t control it, new data could be written to any part of the database in terms of time (for example, someone decides to push historic data to Vortex). So, the issue here is that some consumers of data are interested only in fresh data, so they want to interact with Data Lake in an incremental way (and there is no efficient way to do it in the main Data Lake). The solution we have is a separate version of Data Lake (it stores data for a short period of time (30 days) and is cleaned up by S3 retention policy) where we partition by ingested time instead of event_time. We use Kafka record timestamp, so based on Kafka guarantees of topics with LogAppendTime type, we can say that if data is written to hour X, from Kafka topic partition P, all data in hour X-1 is already in the Data Lake.</p><p><strong>Part 4. Athena</strong></p><p>The last step in building a data lake is to make that data available in AWS Athena. We’re currently using scheduled Glue crawlers to discover Glue tables and update partitions as it was the easiest way to start with. We are also moving to a manually-maintained Glue catalog, as calling crawlers just to register new partitions is overkill.</p><p>Athena database, backed by S3 storage, is the final destination of data (from the data engineers point of view) and it’s used by BI and data science in various reports, jobs and services but also, as all data goes through Kafka cluster and each event has its own topic, it opens up the possibility to write real-time Kafka applications based on that data.</p><p>To summarise the benefits of the current pipeline:</p><ul><li>All data is available in Kafka so we can write new real-time applications on top of that. As all data goes through a Kafka cluster (available for data products in real-time) and is written to the data lake, we are sure that it is consistent between real-time products and the data lake.</li><li>It is easy to scale horizontally in Kafka, to handle more events</li><li>As we have S3 to store all acquired events, we can run backfills (in batch fashion), but we can reuse the same code from the Kafka stream application to transform those events.</li></ul><p>To learn how Trainline uses its data platform to power real-time data products for its customers, take a look at Jan’s blog <a href="https://engineering.thetrainline.com/meet-kronos-trainlines-real-time-data-product-platform-and-team-f4b3dbe663ec">here</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=67272041b124" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/building-a-data-lake-from-batch-to-real-time-using-kafka-67272041b124">Building a data lake: from batch to real-time using Kafka</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ Introduction to Data Science at Trainline ]]>
      </title>
      <link>https://engineering.thetrainline.com/introduction-to-data-science-at-trainline-a47be79be8a9?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/a47be79be8a9</guid>
      <category>
        <![CDATA[ data-science ]]>
      </category>
      <category>
        <![CDATA[ data ]]>
      </category>
      <category>
        <![CDATA[ machine-learning ]]>
      </category>
      <dc:creator>
        <![CDATA[ Louisa Johns ]]>
      </dc:creator>
      <pubDate>Mon, 14 Dec 2020 10:46:30 GMT</pubDate>
      <atom:updated>2020-12-14T10:46:30.752Z</atom:updated>
      <content:encoded>
        <![CDATA[ <h3><strong>Introduction to data science at Trainline</strong></h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QZuwivrffw7DLIzZ--aE-g.jpeg" /></figure><p>Hello and welcome to Trainline’s data science team! We know that the role of a data scientist can vary from company to c ]]>
        <![CDATA[ ompany — this blog post aims to introduce you to who we are and how we work here at Trainline.</p><p><strong>One team</strong></p><p>As data scientists, we are part of a wider data team, along with Data Engineering and Business Intelligence. Even though we are a single team, we’re usually all working on different projects with teams across the business — though sometimes we pair when it’s a particularly large, or time sensitive project. Most of the team work on more general data science projects — a mixture of building data products with the product team as well as investigative work providing insights for teams across the business — but we’ve also got data scientists who focus purely on experimentation, or real-time data.</p><p>We’re a close team, and meet daily to check in on each other’s projects, and discuss any problems we’re having to help develop solutions together. It’s so often the case that one person in the team might have already solved an issue that someone else might be tackling — talking things through together saves so much time and frustration! We also tend to hold team data discovery sessions when one of the team is kicking off a new project, again helping to come up with new ideas that one person alone might not have thought of.</p><p>We’re a pretty diverse team and have all become data scientists through different paths. Some of us have physics or maths backgrounds, whereas others of us studied Computer Science, Economics, Bio-Med or even Psychology as undergraduate degrees and beyond. There really is no right way into data science, and we think the variety really helps us to see things from different viewpoints, bringing different insights and ideas to the table. Beyond the coding and tech knowledge, the most important thing for us is that we all have a quantitative focus and an analytic, enquiring mind!</p><p><strong>A Typical Project</strong></p><p>Our work tends to fall into one of two categories: building data products (such as SplitSave or Crowd Alerts), or analysing data to provide insights for a team.</p><p>Data products start with a big discovery session with the rest of the product team. These sessions can last for up to a week and involve lots of post-it notes and sketching to fix on the product’s design. When building SplitSave, for example, we worked alongside Customer Research, Design, product owners and developers to understand the problem and customers’ opinions. We also discussed potential designs, particular pain points we wanted to solve, and debated how much was actually within the possibility of technology! Data science can often be seen as a magical solution to everything, and it’s important for our team to be realistic about what we can achieve!</p><p>When working on more investigative projects, we will kick off our sessions by sitting down with the team and really understanding the problem they want to solve — for example, helping the CRM team to understand customer bookings. With our knowledge of the data, we’re often able to suggest additional questions to explore and help guide the analysis forward — for example, we could look into whether customers tend to rebook the same journeys at regular intervals, or whether there are related stations, that customers who travel to one station, also tend to visit. These can then lead on to new data products later on — we’ve now built a rebooking model to help customers rebook their regular journeys earlier before prices rise, and an inspiration model to help customers find new destinations based on where they might have visited in the past.</p><p><strong>Preparation is key</strong></p><p>Once we have agreed the scope of the project, the next step is to make sure we have a data science plan in place to solve this. Sometimes this might be very obvious — we can get really powerful insights simply from basic maths and aggregations — but sometimes projects require a new machine learning model that we haven’t used before. As a team, we run regular “Journal Club” sessions to keep each other updated on the latest developments in the world of data science, which can really help when sketching out new projects. As this can be very experimental, it’s really important for us to allow enough time for this research, and not to over-promise before we know a technique can work!</p><p>Before we can get working with the data, it’s also really important to spend time preparing the data. This part of a project can often get brushed over — it’s a lot less glamourous than machine learning — but its’s also a really important step. As they say, “Garbage In = Garbage Out”, and if we don’t spend enough time making sure our data is ready for an algorithm to learn from, then we can’t really expect to get anything useful out the other end. This work can involve dealing with badly formatted data, fixing incorrect data, or finding alternative sources if we are missing or have very little data. If we’re going to be using machine learning, we also need to do some feature engineering to ensure that the features of the data are ready for a model to learn, as well as having a clear target. If we wanted to train a classifier to identify between a customer travelling for leisure or for business for example, we need to give the model examples of both types of customers to learn from: features could perhaps include the time of day or the ticket type, and the label of whether this journey was indeed leisure or business.</p><p><strong>Focus on impact</strong></p><p>This middle coding section is where we spend most of our time. Depending on the project, we might be focused on building and training a machine learning model, exploring the data and producing graphs showing relationships between different features, or setting up pipelines to ensure jobs continue to run automatically each day.</p><p>When finishing a data product, we usually build an API for the app/web developers to integrate with. Through this they give us information about the customer’s session and we can return the relevant results. For example, when a customer is searching a UK journey in our app, our Split Ticket Recommender predicts the best place to split the ticket for that journey in order to maximise savings and then serves this information back to the customer, as part of their search results. It often takes a bit of work and testing to make sure that the API requests and results are in the format everyone is expecting.</p><p>When we’re providing insights back to a team, this is usually done in the format of a presentation. Being able to communicate clearly is a valued skill with data science — we often have to explain some really complicated ideas when presenting our findings and recommendations. It’s always great to help teams find additional understanding in data they use so often, and the possibilities of where to go next are often endless!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a47be79be8a9" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/introduction-to-data-science-at-trainline-a47be79be8a9">Introduction to Data Science at Trainline</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ Introducing webpack-bundle-delta ]]>
      </title>
      <link>https://engineering.thetrainline.com/introducing-webpack-bundle-delta-dd778dc9373b?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/dd778dc9373b</guid>
      <category>
        <![CDATA[ stats ]]>
      </category>
      <category>
        <![CDATA[ performance ]]>
      </category>
      <category>
        <![CDATA[ trainline ]]>
      </category>
      <category>
        <![CDATA[ webpack ]]>
      </category>
      <category>
        <![CDATA[ open-source ]]>
      </category>
      <dc:creator>
        <![CDATA[ David Houweling ]]>
      </dc:creator>
      <pubDate>Tue, 17 Nov 2020 10:12:28 GMT</pubDate>
      <atom:updated>2020-11-17T10:12:28.819Z</atom:updated>
      <content:encoded>
        <![CDATA[ <figure><img alt="" src="https://cdn-images-1.medium.com/max/274/1*37HRlbElXZCtnXi06YJ1_w.png" /><figcaption>webpack-bundle-delta logo</figcaption></figure><p><em>Get insights on your webpack builds front and centre!</em></p><h3>TL;DR</h3><p><a href="https://github.com/trainline/webpack-bundle-delt ]]>
        <![CDATA[ a">webpack-bundle-delta</a> is a CI tool with a plugin architecture to provide insights into your webpack builds, highlighting the delta, to catch and solve performance degradation of your applications before they are merged into the main branch.</p><h3>Background</h3><p>Over the past 2 years, Trainline has put a big emphasis on the performance of our web applications. The mantra came from the heads of the company, and so we defined some metrics and put together a Web Performance Team to tackle them.</p><p>There is an abundance of blog posts/articles out there with guidelines on how to improve web performance, both server and client-side, but as you might expect there is not a one-size-fits-all solution; since things are in constant evolution and need tailoring.</p><p>Many tools exist which help with monitoring server and browser performance and tracking metrics; however, a lot of these tools are intended for production use. This means that code has already been reviewed, merged into the main branch, deployed through testing/staging environments, and finally served to customers.</p><p>There are also some precious tools that can be configured for Continuous Integration (CI) including:</p><ul><li><a href="https://github.com/siddharthkp/bundlesize">bundlesize</a>, a popular choice to help monitor the growth of compiled JavaScript files, but it’s simple approach only verifies the overall size without explaining the why. It is worth mentioning that this opens the door to developers simply changing the value of the budget size; without necessarily engaging in deep investigations to identify the root cause</li><li><a href="https://github.com/GoogleChrome/lighthouse-ci">Lighthouse CI</a>, provides early monitoring and suggest performance best practices, but can only surface information of running applications. It can also be somewhat unpredictable and requires several runs to reduce variance</li></ul><p>Even after setting up these tools, we occasionally saw code changes going live which introduced a performance degradation, and at times, taking weeks to be flagged. At that stage, one of our performance developers would have to go and dig through the metrics, identify the offending pull request(s), and finally analyse the changes introduced in order to unpick or rework the change.</p><p>When evaluating these issues, there were some recurring questions coming up: Why? Why did this change happen? Why did the developer not understand the impact of their change? Why did the code make it to production?</p><h3>Requirements and options</h3><p>I put together some simple requirements based on these conversations:</p><ul><li>Capture size changes across JS/CSS as either actual, gzip, and brotli (as we serve up brotli where possible)</li><li>Capture the actual changes that occurred within each JavaScript file that is to be consumed</li><li>Help keeping the JavaScript files optimised through removal of redundant libraries, which could either mean duplicate, or “like for like”</li><li>Show this information in the Pull Request so that developers do not need to go digging through logs or reports</li></ul><p>Given the above requirements, I set out to look for tools that would help us accomplish this. <a href="https://github.com/trainline/webpack-bundle-delta/blob/master/docs/comparison.md">A few options were found</a> but none really met the brief. Some offer size diffing, others offer changes in each file, but the biggest gap I found was surfacing the information for ease of developer access.</p><h3>Introducing webpack-bundle-delta</h3><p><a href="https://webpack.js.org/">Webpack</a> is arguably the most popular tool out there for bundling all your code and assets for use for the browser. It has many great features covering all aspects of web development, includes a great architecture for building upon and extending, and surprisingly, offers very detailed statistics about the compilation itself (when enabled).</p><p>Tools such as <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> make use of these statistics to show great detail using an interactive treemap visualisation, and this was a tool we regularly checked when it came to analysing changes that had taken place.</p><p>The idea is that if we could compare the statistics from one commit to another, we could then flesh out solutions to meet the requirements above. This can then be posted to the pull requests using <a href="https://github.com/danger/danger-js">Danger.js</a>, a solution we have already integrated into our CI pipelines. From this, I went about putting a tool together that would, hopefully, make our developers lives easier.</p><p>The goal of <a href="https://github.com/trainline/webpack-bundle-delta">webpack-bundle-delta</a> lives in the name itself. It is to highlight the delta, which correlates exactly to the changes being made in the pull request. Even though the tool is still in its infancy, it has been built to be extendible; ensuring that we, at Trainline, can enhance it further as we continue to learn more, and that the community can not only benefit from this but also join us on the journey for a better web.</p><p>The current features, at time of initial release, are:</p><ul><li>Asset size monitoring — monitor individual output file size changes between the base and head branches</li><li>Trace changes — provides details about changes to each chunk file</li><li>Duplication detection — highlight if a change introduced duplicate modules within the same chunk</li><li>Resolve alias remap — provide suggestions to remove like-for-like functionality (e.g. <a href="https://www.npmjs.com/package/lodash.isequal">lodash.isequal</a> is also available as <a href="https://lodash.com/docs/4.17.15#isEqual">lodash/isEqual</a>, so you should only use one and not the other)</li><li>Restrict — warn/prevent certain files being introduced into the output</li></ul><p>When integrated as part of our CI process, the developers see something like this</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*G6U627TairZnVki_F1e8yA.png" /><figcaption>Example GitHub Pull Request comment from webpack-bundle-delta</figcaption></figure><h3>Real life benefits</h3><p>To illustrate the impact delivered by webpack-bundle-delta, I’ll use the output from one of our pull requests at Trainline. In this case the changes were to clean up translations for one of our UI components; as such we didn’t expect any issue, since our translations for this application are handled and served from the server-side. Read on to discover how webpack-bundle-delta proved its value.</p><h4>Summary comment</h4><p>By default, a concise summary is provided to not pollute readability; obviously, this can be expanded for more details.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kkxma7RL2acCEBCxJq14kQ.png" /><figcaption>Example summary comment from webpack-bundle-delta</figcaption></figure><h4>Plugin: Size Changes</h4><p>The first requirement was to capture size changes; the Size Changes plugin produces two tables (significant changes, and minor changes). In addition to this, it can be used to ensure files stay within a set budget (like <a href="https://github.com/siddharthkp/bundlesize">bundlesize</a>).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IU_bQ4zKCIwOAz9bSV237g.png" /><figcaption>Example table row from the Size Changes plugin</figcaption></figure><p>The above image is an example row of the table with the columns being:</p><ul><li>Chunk name + extension</li><li>Stats size</li><li>Gzip size</li><li>Brotli size</li><li>Budget (not shown, but present when configured)</li></ul><p>As a final note, when exceeding the allocated budget Danger will fail, in order to enforce this as part of the CI checks.</p><h4>Plugin: Trace changes</h4><p>The second requirement focuses on how the changes occurred; the Trace Changes plugin achieves this by highlighting the impact of changes to specific chunks.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2CwAqPlLIt4V6--vkOCpwA.png" /><figcaption>Example output of file changes within one of the chunk files from the Trace Changes plugin</figcaption></figure><p>In context of the pull request we’re using as an example, we can see that the translations for the promo-banner component were being bundled into the page bundle. From this, we went back to the UI component and corrected the approach.</p><h4>Plugin: Restrict</h4><p>For the third requirement, in order to create optimised bundles, the restrict plugin can help by ensuring certain files are not included in the webpack output (either by providing warnings, or errors), automating the enforcement whilst providing feedback to the developer as to the reasoning behind it.</p><p>With the following <a href="https://github.com/trainline/webpack-bundle-delta/blob/master/src/config/README.md">configuration </a>we can restrict the languages from being included (other than English, as English is our fallback language):</p><pre>{<br> &quot;plugins&quot;: [<br> {<br> &quot;name&quot;: &quot;restrict&quot;,<br> &quot;config&quot;: {<br> &quot;restrictions&quot;: [<br> {<br> &quot;search&quot;: &quot;\\/translations\\/(?!(en)\\.json)&quot;,<br> &quot;responseType&quot;: &quot;warn&quot;,<br> &quot;message&quot;: &quot;Only english translations should be imported (to act as fallback), translations are determined server side&quot;<br> }<br> ]<br> }<br> }<br> ]<br>}</pre><p>Producing the following Danger output:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AXuVbwWDgmSgPsz2cdFpPA.png" /><figcaption>Example output showing restrict plugin warnings</figcaption></figure><p>When expanding for more information, the Restrict plugin output provides more details such as which chunks the file is used in and what the first execution path was, to help identify how webpack first resolved the file.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GEeu2sIrUXjyMjm0IA24OA.png" /><figcaption>Example output showing restrict plugin details</figcaption></figure><p>Why is this important from a performance point view?</p><ul><li>These were translations for one of our simpler components, resulting in a 1% increase to JavaScript files. More mature codebases, including our own, can include tens, even hundreds of components (along with significantly more languages).</li><li>If all the translations ended up in the JavaScript bundles the size of this file would easily get to megabytes scale, even under gzip/brotli compression.</li><li>This is because the JavaScript is put through minification, but the strings themselves won’t be minified. When put through gzip/brotli compression, the fact that the rest of the JavaScript is already minified would result in sub-optimal compression, and a good amount of unused strings included.</li></ul><h4>Other plugins</h4><p>For additional information on the other plugins included, check out <a href="https://github.com/trainline/webpack-bundle-delta/tree/master/src/plugins">the plugins folder</a> and the accompanying documentation.</p><h3>Where to from here?</h3><p>Through open sourcing webpack-bundle-delta, we hope to see others try it out and help evolve it from its present infancy into a mature tool catering for the front-end community.</p><p>Why not try it out by heading over to <a href="https://github.com/trainline/webpack-bundle-delta">https://github.com/trainline/webpack-bundle-delta</a></p><p>There is also a <a href="https://github.com/trainline/webpack-bundle-delta#cli">CLI</a> to make use of this tool locally, or as part of the build output which can be used if you don’t yet have danger.js configured (to begin integration and try it locally).</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dd778dc9373b" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/introducing-webpack-bundle-delta-dd778dc9373b">Introducing webpack-bundle-delta</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ CUSTOMERS’ BEHAVIOUR FROM THE INSIDE OUT ]]>
      </title>
      <link>https://engineering.thetrainline.com/customers-behaviour-from-the-inside-out-a7efb1307890?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/a7efb1307890</guid>
      <category>
        <![CDATA[ trainline ]]>
      </category>
      <category>
        <![CDATA[ analytics ]]>
      </category>
      <category>
        <![CDATA[ customer-behaviour ]]>
      </category>
      <category>
        <![CDATA[ cluster-analysis ]]>
      </category>
      <category>
        <![CDATA[ segmentation ]]>
      </category>
      <dc:creator>
        <![CDATA[ Angela Occhiogrosso ]]>
      </dc:creator>
      <pubDate>Fri, 11 Sep 2020 11:42:10 GMT</pubDate>
      <atom:updated>2020-09-11T11:42:10.375Z</atom:updated>
      <content:encoded>
        <![CDATA[ <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WzFfzL5HiYX5o7vxl1O5qQ.jpeg" /></figure><p>I’m not much of a writer but I can’t resist telling you how interesting and inspiring the study of customers’ behaviour can be, so I’ll try to put into words! It’s like a jigsaw puzzle: so many little pieces to put together to get to see the full picture. The difference is that customer behaviour is not static — it’s always evolving and that’s what’s challenging and intriguing at the same time.</p><p>In this article, rather than telling you who Trainline customers are or how to solve a mystery about your own customer base, we’ll look at some tips on how to get started in this never-ending discovery journey… are you ready?</p><p>The two elements you’ll need are analytical knowledge and business knowledge. Some advanced knowledge in analytics is assumed as the approach goes from the inside out; it starts by analysing internal data that are then compared to those externally provided by market research. And you will need to know your business — data don’t talk, data needs to be interpreted!</p><p><em>Before understanding your customers, you should focus on your products…</em></p><p>For many industries product classification is a straightforward exercise, for example: if you sell furniture you usually have products already divided into kitchen, living room, bedroom, etc… categories; if you work in the food industry you could refer to the supermarket aisles; if you are in the movie/music industry… come on that’s easy!!!</p><p>But what if you, like me, work in the travel industry?</p><p>While we know some of the most common purposes of travelling (commute, shopping, business, leisure), we don’t really know why people would want to go from St. Albans to St. Pancras: shopping in the city? Going to work/school? Try to reach the Eurostar station to go on holiday in France, or for a business trip? All these options seem plausible. So how do I classify that specific trip?</p><p>Identifying the reasons for travelling is anything but straightforward, therefore we need to get some help from our computers. A simple <a href="https://towardsdatascience.com/k-means-clustering-explained-4528df86a120">cluster analysis (k-means)</a> can shed some light by identifying similarities among journeys. This analytical technique is called <em>unsupervised</em> as it chooses a set number of groupings (‘segments’), starting from parameters that are apparently unrelated to one another.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/526/1*Qyr85jJV1GA5zTZPDwRJ9w.jpeg" /><figcaption>source: <a href="https://en.wikipedia.org/wiki/Cluster_analysis."><em>https://en.wikipedia.org/wiki/Cluster_analysis</em>.</a> Example of an output from clustering analysis</figcaption></figure><p>What are those parameters? Well you would need to get creative! Time/day of departure, single/multiple passenger journey, advance/on the day booking are all elements that can work as inputs… I’ll leave you the fun of continuing with this list!</p><p>I’ve made this sound all very effortless, but you need to spend a lot of time understanding your data, manipulating it and analysing potential correlations between variables in order to get meaningful answers. The clustering technique is a trial-and-error analysis, so be ready to iterate a few times to identify what the segments mean in the real world and keep discussing your results with your commercial stakeholders and people in the research team.</p><p><em>From products to customers’ classification</em></p><p>Once you are happy with your journey segments you can move on with analysing customers’ behaviour.</p><p>Your base data should look like the sample matrix below with one unique line per customer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uTUKIwxKIAtV82Rf0ABa0Q.jpeg" /></figure><p>Your columns will consist of a series of variables describing the specific buying behaviour. A good starting point would be to associate to each consumer the proportion of journey types they make. Yes, the same customer can travel for many purposes!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xfWzOJy5s1hFR2GhU5x9eA.png" /></figure><p>It’s also important to include some transactional variables, so that the computers can identify similar purchase patterns and distinguish between more frequent travellers and those who might travel once or twice in a year.</p><p>My preference is to avoid averages (i.e., average transactions in a year) as customers often show different purchase behaviours from one year to another. I would use actuals within a specific timeframe instead, taking as a reference the day of first purchase, for instance: transactions within first 7days/ first 30days/etc… and the same with sales (i.e., the value of each transaction).</p><p>Once again, I’ll leave it to your imagination! Now you can just apply the same logic as with the journey level data.</p><p><em>We have our customers’ segmentation… What now?</em></p><p>I’d be lying if I said that the part of my job I prefer the most is the analysis itself. What I really enjoy is building stories from the data. Those stories form the hypothesis that people in different marketing teams will have to test. And regardless of whether those hypotheses are proved or disproved, there will always be some learning from them.</p><p>I can’t speculate in great length about what to test and what way to test as they are really linked to your business strategy, but to summarise some of the areas where segmentation can really make a difference:</p><p>- Acquisition: by building lookalike audiences. In other words, you can decide to acquire new customers that “look-alike” a segment of your choice.</p><p>- Engagement, by targeting your existing customers with what you have learnt they need/like.</p><p>- Commercial/Finance, by looking at a shift in your customer base. Segmentation can be a powerful tool to track business health. Thanks to segmentation we can immediately recognise a frequent high-value customer from someone that doesn’t use your product as regularly. If the percentage of high-value customers decreases in a given period of time, then that would be an immediate warning that something is not quite right.</p><p>- Market research, by indexing the segments against industry benchmarks and understanding the current percentage share of your company.</p><p>In a nutshell, customer segmentation is</p><p>- A fun analytical technique, which proves your ability in translating customers’ attributes into variables and your expertise in data interpretation.</p><p>- A simple way to contribute to your business strategy.</p><p>- A smart approach for building audiences.</p><p>- A quick measure of success!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a7efb1307890" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/customers-behaviour-from-the-inside-out-a7efb1307890">CUSTOMERS’ BEHAVIOUR FROM THE INSIDE OUT</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ ‘Giving it all up’ to become a professional geek: my transition from BA to software engineer. ]]>
      </title>
      <link>https://engineering.thetrainline.com/giving-it-all-up-to-become-a-professional-geek-my-transition-from-ba-to-software-engineer-99293c44f2be?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/99293c44f2be</guid>
      <category>
        <![CDATA[ women-in-tech ]]>
      </category>
      <category>
        <![CDATA[ software-development ]]>
      </category>
      <category>
        <![CDATA[ career-change ]]>
      </category>
      <category>
        <![CDATA[ coding ]]>
      </category>
      <category>
        <![CDATA[ reskilling ]]>
      </category>
      <dc:creator>
        <![CDATA[ Meriem Chelbi ]]>
      </dc:creator>
      <pubDate>Thu, 16 Jul 2020 13:13:09 GMT</pubDate>
      <atom:updated>2020-07-16T13:13:09.163Z</atom:updated>
      <content:encoded>
        <![CDATA[ <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*oMp6uA30HbfmNYvCOzxNHQ.jpeg" /><figcaption>Photo by Ayesh Rathnayake (2020), Unsplash</figcaption></figure><p><strong>Some say the perfect job doesn’t exist.</strong> And it probably doesn’t. But I’m one of the lucky few able ]]>
        <![CDATA[ to do my hobby for a living. This time last year, I was working as a principal business analyst at Trainline. I enjoyed my job and was progressing well in it. Since November 2019, I’ve been working full-time as a software engineer for a leading e-commerce business. I’d like to share my journey with you, in the hope it might help others considering making a similar move.</p><p>For those of you who don’t know what a business analyst does (which is most of the people I’ve met), here’s a quick explanation. BAs work with stakeholders and with developers to ensure the software built solves the problem it set out to fix. As such, I’ve worked with software engineers for years, but it only recently occurred to me to try my hand at programming myself. To begin with, the motivation was to peek on the other side of the fence. Worst case scenario: the new skill and added perspective would make me better at my current job. I hadn’t expected to develop a passion for coding, let alone end up doing it for a living.</p><p>I started learning to code with Python in March last year, on a friend’s recommendation. As a popular language with a relatively simple setup, there were plenty of resources for me to draw from. I soon found myself coding at every opportunity- during lunch breaks, over the weekends, on my days off. I’d get started with the intention to spend a couple of hours on an exercise, only to look up from my laptop to find an entire afternoon had passed. I became addicted to the sense of achievement that came with cracking a difficult problem, whether getting an algorithm to run or getting to grips with automated testing of my code. The pull of programming was compelling enough for me to start considering a total shift in my career.</p><p>However, a number of concerns nearly put me off my decision.</p><p><strong>Taking a step ‘down’</strong></p><p>Throughout my adult life, I’ve accomplished most major career choices by happy accident. I have a tendency to ‘follow my nose’ and take any opportunity to develop an interest. This is how, ten years after graduating from a Sociology degree, you find yourself five years into a career in tech. I was always far from setting long-term goals for myself. In contemplating a move to software engineering, I’d have to start actively planning for my professional development.</p><p>I’ve achieved more than I could have anticipated in my professional growth so far. I suddenly found myself considering sacrificing my seniority for an entry-level development role. This was tantamount to sliding down the career ladder to climb back up it via a different track. It would be a slow process, which might not pay off… Was I making a big mistake?</p><p>I shared this concern with friends and acquaintances. The consensus that came back was that being a developer wasn’t only about coding. You need other key skills like problem-solving and communication. In entering the profession at such a late stage in my career, I would be bringing years of experience with me from other jobs. Thus, my learning curve as an engineer would likely be accelerated, and I’d be adding value from an early stage.</p><p><strong>The cost of re-skilling</strong></p><p>Many people are re-skilling these days. Coding bootcamps provide a fast entry point to the developer job market. They teach most of the skills needed to get started at a decent level. The downside is they’ll usually set you back thousands of pounds and may require a break in employment. All of this means high financial outgoings, a temporary loss of or drop in income, as well as plain old hard work. In short, this change comes at considerable personal risk and sacrifice.</p><p>I believe these concerns are key factors in the under-representation of certain backgrounds in software development. Most of my developer friends and colleagues first started coding as teenage ‘bedroom hackers’, usually as a result of early exposure to video games. Technology is gradually becoming accessible to more people and being taught from an increasingly young age. Yet those of us who missed out on those opportunities in our childhood years are only able to re-skill at significant personal risk and cost.</p><p>This is where I’ve been incredibly lucky to have met people at Trainline who believe in my abilities and were willing to back me in my move. I was able to negotiate a role which made the most of my existing experience in tech, and which gave me an opportunity to learn on the job without compromising my job security. I joined a supportive team and work on an interesting domain.</p><p>This leap would be daunting for most people in my position. I have an amazing mentor who works with me to develop my weaker skills and broaden my technical horizons. By providing the opportunity and support, Trainline have made it achievable and secure. I’m able to bring my best self to work every day and deliver value for customers. In return, the company retains a motivated member of the team with years of experience and domain knowledge they might have otherwise lost.</p><p><strong>What if I’m no good?</strong></p><p>If you’re naturally cautious, as I am, you’d want to feel confident of your eventual success before embarking on such a drastic career shift. In contemplating my decision, one of my biggest worries was simply this: “What if I’m no good?”. Having worked alongside accomplished developers for years, the bar was high and I wasn’t sure I was up to the job.</p><p>Cue my supportive friends and colleagues again. Apparently, impostor syndrome follows most developers around for much of their working lives. Working in a field with such an extensive body of knowledge, you’re surrounded by extremely accomplished people. This can feel overwhelming, regardless of your level of experience. If you do find yourself in a similar position, remember: it doesn’t hurt to ask.</p><p><strong>So, was it worth it?</strong></p><p>Six months on, I haven’t looked back. I keep a log of everything I learn on a daily basis, from database normalization to asynchronous programming and features of the .NET framework, with which I’m currently working. I find it incredible reading back through that long list and realising how far I’ve come.</p><p>My code is deployed to production, and I take pride in knowing that people around the world are using software I’ve written to search for travel. I’ve just finished teaching other aspiring developers through <a href="https://www.codefirstgirls.org.uk/">Code First: Girls</a> and had the pleasure of seeing others wake up to the possibilities that programming can afford.</p><p>If you’re reading this post and considering taking the plunge yourself, remember you’re not alone. Last year, my colleague Jeremy Le Francois also wrote <a href="https://engineering.thetrainline.com/a-career-transition-from-marketing-to-software-engineering-28d87206933c">this excellent post</a> on his career transition to software engineering, via a different route. There are countless other stories, resources and support networks available at the touch of a button. But the key thing is to believe in your own abilities and seek the support you need when you need it.</p><h3>About the author…</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*oJc50v3JNcqymmyPXCdmVw.jpeg" /></figure><p>Meriem is a self-taught (with a little help from her friends) .NET developer. A business analyst and product manager in a previous life, she recently entered the world of professional software engineering. She currently works on the team that powers journey searches at Trainline, where accuracy and performance at scale are supported by strong engineering practices. A lifelong nerd and lover of solving problems, she hopes to help others discover a passion for shipping great features and writing beautiful code.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=99293c44f2be" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/giving-it-all-up-to-become-a-professional-geek-my-transition-from-ba-to-software-engineer-99293c44f2be">‘Giving it all up’ to become a professional geek: my transition from BA to software engineer.</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ Onboarding new joiners with Jira ]]>
      </title>
      <link>https://engineering.thetrainline.com/onboarding-new-joiners-with-jira-c012c74f972a?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/c012c74f972a</guid>
      <category>
        <![CDATA[ onboarding ]]>
      </category>
      <category>
        <![CDATA[ process-improvement ]]>
      </category>
      <category>
        <![CDATA[ recruitment ]]>
      </category>
      <category>
        <![CDATA[ workflow ]]>
      </category>
      <category>
        <![CDATA[ hiring ]]>
      </category>
      <dc:creator>
        <![CDATA[ Sara Estrela ]]>
      </dc:creator>
      <pubDate>Mon, 13 Jan 2020 16:39:56 GMT</pubDate>
      <atom:updated>2020-01-13T16:39:56.258Z</atom:updated>
      <content:encoded>
        <![CDATA[ <figure><img alt="" src="https://cdn-images-1.medium.com/max/677/1*PsuTOVCXVHhi0chN6K7TiQ.png" /><figcaption>Happy Team</figcaption></figure><p>Have you ever had a daunting new job experience? Have you ever started a job where they showed you your desk, your team, but everyone was too busy to talk to you and help you? Have you ever had your manager, on your first day, tell you “I’m sorry, I don’t have time right now”, before handing you some documents that are supposed to keep you busy for two days? I’m sorry to say that you were not the only one. All of those happened to me and it didn’t feel good.</p><p>It’s important that you stop to think if the new starters around you are going through something similar. You can fix it. Even if you’re not a manager, it is still within your power to make a difference to someone’s experience.</p><p>Whether it is your first job or your 10th job, most people will feel nervous and anxious about those first few days. It is the new team’s responsibility to mitigate these feelings and transform it into a pleasant experience. After all, it is a unique set of days, unparalleled for the remainder of your tenure.</p><p>We all seek the same basic things; we want to feel welcomed and supported, we want to feel that we belong to that place and to that team, and that everything is going to be OK. We want to feel comfortable and to be happy. We want to feel that someone is interested in us, in our work and in what we have to say. We all want to understand what’s expected of us in those first few weeks, who we will be working with and how to get things done.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*WUhVeW6ONqevHWcUd5rYJQ.jpeg" /></figure><p>Making sure we do not overwhelm a new starter (well, ideally, we don’t overwhelm anyone) is crucial. People need to start slowly. The amount of new information they are expected to process in the first few weeks is huge and, as managers, we must be mindful of this. So, how can we get all that information to the person in a manageable way? In a way that they will feel in control, with a good view of what lies ahead, and that allows us to track their progress.</p><p>This actually sounds like a familiar problem, one that we’ve solved before. How is this any different from organising a new feature backlog? It isn’t, right? So, could we try and use Jira (or any equivalent ticketing system) to improve our new starter’s experience?</p><p>I’ve decided to do just that in my team, Routemaster.</p><p>I’ve created a Jira board, a welcoming board. The cards on it are very diverse, ranging from informational items to actual tasks in roughly 25 to 35 tickets. These are slightly adapted based on type of employee contract, role, and location. Most tickets will be assigned to the new joiner, but a few of them are reminders for the manager as well, for the tasks they need to complete for each new joiner.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KzZyaDSVbJFA--2aZqMzhw.png" /><figcaption>Partial view of an onboarding Jira board</figcaption></figure><p>These tasks should be reviewed each time a new joiner starts. This is, in fact, one of the reasons I like this process. Instead of having a generic Wiki page with a set of catch-all instructions, small adjustments can be made to the set of tasks, personalising the board to better reflect the individual.</p><p>As you create a new board (by cloning a previous one), this becomes a natural process. You will also be compelled to check if there are any comments added by the previous new joiner, if you haven’t yet, and these can be acted on accordingly. Personally, I prefer to react when the previous person adds the comment, so it does not get pushed down in my own to do list (Jira notifications are handy here) and so that the new joiner perceives the support they undoubtedly need, and realises that we are interested in what they have to say. If someone adds a good idea, I will discuss it with them and then raise a ticket for the next new joiner and share the ticket number with the person who mentioned it. Also, by reviewing the tickets each time you make sure they are still applicable, because we know things change fast. The manager should also check this board frequently (my preference is right at the start of the day) and make sure the new joiners have all the support they need to finish all the tasks (also known in other contexts as removing impediments).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*JoxbHrgcWX9Lw40IHih-fg.jpeg" /></figure><p>Let’s have a look at some examples of what I’ve added to our Jira board in more detail. We can group the tasks into some bigger sets.</p><p><strong>Admin Tasks</strong></p><ul><li>DBS Check</li><li>Request Building Access Card</li><li>Setup an Avatar — Encourage people to add their photo to all the channels. We should know each other. Also, it makes it easier to approach people from other teams. How many times have you chatted to someone on Slack without having any idea what they look like? Maybe you just sat next to them at lunch time and you don’t even know. If you did you could have said hi, isn’t that right?</li><li>Setup workstation (What to install)</li><li>Setup VPN</li></ul><p><strong>Documentation/Useful Information</strong></p><ul><li>Fire alarm details</li><li>Read Engineering/Team Starter Page</li><li>Check People Portal</li><li>How to book holidays</li><li>How to submit timesheets</li><li>Try to get everyone’s name — Try to make this a fun activity. Asking some questions like a charade so that they need to talk to different people to find the right one.</li><li>List of training sessions to attend</li><li>Code Sweep day</li><li>Mood Survey</li></ul><p><strong>Perks</strong></p><ul><li>All the cool freebies you can get</li><li>All the benefits available</li></ul><p><strong>Processes:</strong></p><ul><li>Check retrospective board and Jira board</li><li>Setup personal objectives</li><li>Ask a colleague for the KeePass password</li><li>Participate in an end to end task</li><li>Clone your first repository</li><li>On-call and support rota — Spend extra time on the tickets that refer to those least favourite activities. Provide good context and be clear on what’s expected and when. Be supportive by saying something like you won’t be on-call until you’re ready and the team will make sure you get all the training that you need.</li></ul><p><strong>Manager’s tasks:</strong></p><ul><li>Set 1–2–1 weekly meeting</li><li>Forward invite to relevant meetings</li><li>Add user to mailing lists</li><li>Setup timesheets</li><li>Add user to team’s GitHub</li><li>Setup Corp Account</li><li>Book team lunch — This item refers to booking a special team lunch to welcome the new joiner, but every day lunches are also important. It sounds so basic but I don’t find it to be so obvious to everyone, unfortunately. Some people are now thinking, seriously, I’m not five. It doesn’t really matter if you’re 5 or 50, bringing the new joiners along for lunch can make a huge difference, the little things show how good of a team you have. Most people will say that what matters is that we have an amazing product backed by some incredible tech inside of a big company with great benefits. That’s the kind of thing that makes someone join a company, but that’s not what will make them stay. Companies pay thousands of pounds to recruiting agencies for a candidate and then can ruin it so easily.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*--LH2Yk2-msJg9CCBQfQvg.jpeg" /><figcaption>Team Lunch</figcaption></figure><p>There is also one ticket for “What’s missing from this list?”. This gives the new joiner the chance to add anything that they felt was missing while helping us to make it better for the next. As I mentioned earlier, it is important to act on this feedback. It will possibly be the first opportunity for them to have an impact and participate in improving something. I usually amend the tickets or just add new ones based on the feedback and share it with them. They can also do it themselves directly.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/478/1*n4-P7a8v6rMcogcjziAINQ.png" /><figcaption>What’s missing from this list?</figcaption></figure><p>A couple weeks after starting at our team, a new joiner told me: “When I joined Trainline I made sure they would let me work from home one day a week. I fought a lot to get that in my previous company and really needed that. But actually, now that I’m here, I don’t really feel that need, I obviously still enjoy WFH occasionally, but everyone is so happy here that I don’t really feel the need to WFH.” This makes everything worth it.</p><p>Please see below Stuart and Chris experiences, on their own words:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/200/1*tW9hFjOP5jCJ4iQMQjlw8w.jpeg" /><figcaption><strong>Chris Foster</strong></figcaption></figure><blockquote>“Often when joining a company you can feel like you’re in a bit of a limbo for the first few days, even weeks. Sara and the Routemaster team were beyond welcoming and allowed me to settle in much more quickly than I expected. Unfortunately, Sara was on holiday when I joined (not so unfortunate for her), however that made the use of a Jira board so much more valuable in my onboarding.</blockquote><blockquote>The Jira board gave me a strong focus of what to do when I first joined and guided me to ask the right questions to the right people. One of the most important parts of using this system was the feeling of progression that can often be absent during the first few weeks in an entirely new environment.</blockquote><blockquote>I was the first to use this system and many things that are on it now were not at the time, for me this shows just how powerful the continuous improvement model can be, even in places you would not expect. Sara always listened to everything I had to say, not just about the Jira board, but every aspect of my experience at Trainline. Routemaster is consistently one of the happiest teams in the mood survey and that can be strongly attributed to Sara’s enthusiasm, caring and love of team building events (stuffing us full of food is always going to help 😊).”</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/200/1*iwZ1djKKgiE8NKR_wdUhnA.png" /><figcaption><strong>Stuart Robinson-Vyas</strong></figcaption></figure><blockquote>“I started at Trainline having worked with the same team for 11 years so I was terrified about learning a whole new way of doing things and not knowing people. The structure of the Jira board meant I could have a sense of what to do without constantly asking for people’s time and a feel of how I was progressing through my induction.The team was really welcoming and I was pairing with people in the first few days, however I start a bit earlier in the morning than much of the team so there was time in most days where I would have been looking for tasks, here I turned to the board for tasks to keep me busy and further my working knowledge.The board contained a diverse set of tasks from setup based actions to more loose knowledge transfer tasks that pointed me in the direction of documentation for me to consume. With this tool I was able to have a grasp on actual processes such as release and operations when I actually came to interact with them.”</blockquote><p><strong>Future improvements</strong></p><p>There is always room for improvement, especially as this process was only set up four months ago and used by only four new joiners, but I would love to see it being adopted by my colleagues or anyone else, so please leave a comment if you trial this out.</p><p>One of the improvements we need is related to the cloning of the tickets. Jira does not have a deep clone functionality for epics, and even the stories with sub-tasks one isn’t great. We could get a plugin or implement some code to do it quicker but overall cloning manually takes me 20 minutes and I personally like to review all tasks and make them better each time.</p><p><strong>Closing Thoughts</strong></p><p>If you read this far is because you really care, so if you are a manager I have a request for you. If you think you might not have the time for this, please try to find time. Your people are your main concern and your most valuable asset. Without them you cannot do your job and your manager cannot do theirs. If for some reason you’re unable to set this up, please delegate, but make sure someone has the time to spend with this new person and to review these tickets. Being interested in them and caring for them is key to their success and yours. People are always on the top of my agenda, as I truly believe that a motivated and coherent team is key for success, particularly in a software development environment where passion and dedication play a central role.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c012c74f972a" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/onboarding-new-joiners-with-jira-c012c74f972a">Onboarding new joiners with Jira</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ Mastering Feedback — Part 1: Feedback and how it fits into a performance-driven culture ]]>
      </title>
      <link>https://engineering.thetrainline.com/mastering-feedback-part-1-feedback-and-how-it-fits-into-a-performance-driven-culture-4241cdb7c245?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/4241cdb7c245</guid>
      <category>
        <![CDATA[ feedback ]]>
      </category>
      <category>
        <![CDATA[ leadership ]]>
      </category>
      <dc:creator>
        <![CDATA[ Juan Antonio Vicaria ]]>
      </dc:creator>
      <pubDate>Tue, 10 Dec 2019 07:57:07 GMT</pubDate>
      <atom:updated>2019-12-10T07:57:07.837Z</atom:updated>
      <content:encoded>
        <![CDATA[ <h3>Mastering Feedback — Part 1: Feedback and how it fits into a performance-driven culture</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zrrnunlSRtdcgujNZEEZtg.jpeg" /></figure><p>I’m sure that you’ve heard it many times: <strong>giving and receiving feedback is really important in a culture of continuous improvement.</strong></p><p>I’ve been trying to create teams where feedback is ingrained in the culture so that we can go beyond together. If we don’t embrace feedback, we start to go a bit blind working towards uncovering our weaknesses. We stop uncovering our blind spots and we don’t grow together.</p><p>Mastering Feedback is not an easy thing nevertheless. Feedback is a dialogue between humans and as such it needs to be given with care and preparation.</p><p>I believe that to be an effective manager and coach I need to master the art of feedback. In this series, I plan to bring you along on this journey so that we can learn and grow together.</p><h3>Feedback should be a gift</h3><blockquote>What did you do there?!<br>That code is not great, I don’t understand why you took so much time doing it.<br>What you achieved was ok, but you missed the most important part of the requirement.</blockquote><p>Is that effective feedback? I don’t think so.</p><p>Feedback can and should be a gift and we will explain why in the post.<br>Many times feedback feels the other way. We are scared of feedback, we sit down in a room with our manager and we feel we are about to feel punished.</p><p>Furthermore, as managers we associate Feedback with a duty that we need to execute, we know it is not going to be nice but it needs to be done. This perhaps is the reason why many junior managers fall in the trap of not having 1–1s, they feel like they don’t want to punish their people.<br>Also, it is very common to see only “nice” 1–1s, where the person is constantly cheer-leaded. Without effective feedback, the person will never achieve their true potential.</p><p>But why does it feel this way? <br>Many times it is because of the way we communicate that feedback:</p><ul><li>Managers who only tell what went wrong and never when the person did well.</li><li>People who only reflect on the things that the other person cannot change and they relate failure to those constraints. Here is an example, “you never help the rest of the team because you are always late”.</li></ul><p>Those are not nice things to say and therefore we avoid giving feedback. We will see that those are not actually forms of effective feedback.</p><p>Fear to give and receive feedback hurts the learner, it hurts the organization where you work in and it hurts you. As managers we need to love and master feedback, it is the single most important tool to create high-performing teams.</p><h3>Where does feedback live in a culture of performance?</h3><p>To appreciate Feedback we need to understand where it sits within the cycle of our manager’s job or in the cadence of a team. Let’s outline how and where feedback sits within a performance culture.</p><p>A way to represent the activities of a team or contributions of a given individual can be the following:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iRQTfNfWiQvo9UWUAQmK7Q.jpeg" /></figure><p>These are cycles of doing, repeating loops set up to achieve your goals. This can be a sprint in Agile Scrum, it can represent a Quarter within a company’s Financial Year, it can also be a week’s work of a person that you manage striving for growth.<br>Feedback sits right in this cycle. It is critical that feedback does not sit in isolation but within the context of those cycles.</p><blockquote>Feedback needs to be embedded in everything that we do.</blockquote><p>Let’s start to break down the steps that compose one of these cycles:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*U2CE-8Q9Fc63Heq8g0BJPw.jpeg" /></figure><ol><li><strong>Setting up the mission:</strong><br>In this phase, the team gets together to decide the goals. In a business setup, perhaps this will start with a product manager giving some guidelines towards what we should be aiming for in the next year. The starting point of the conversation is normally something like: <em>We want to grow the business by X percent in market Y because of reason Z</em>.<br>It is really important that in this step we invest as much time as we need to get buy-in from the members of the team. Alignment is crucial in this step as it glues everything together.<br>A great way to do this is by arranging an offsite where people in the team get together and talk about what we are trying to achieve and explore our mission further. <br>If you are managing or coaching someone, it is really nice to start with a cup of coffee in a coffee shop outside the office setup, and spend as much time as needed knowing the person, talking about their ambition and areas of development.<br>Some common mistakes that I’ve seen done in the past around this step are:<br><strong>- Give the team the mission as a polished statement without involving them at all:</strong> If anything, by doing this you can be sure that getting buy-in is going to be hard.<br>- <strong>Don’t spend enough time defining the mission: </strong>some people have the idea that we should not “waste” working hours defining the goal. But as an example, a quarter lasts 3 months, that is more or less 60 working days, representing 450 working hours. If we spend 6 hours with the team defining together the mission, that is 1.3% of the quarter’s time, and it will be worth it.</li><li><strong>Setting up the path:</strong><br>In this next step, together as a team, we establish the initial plan. Our job as coaches or managers is to provide <em>intentional focus</em>. <br>Why do we need to provide focus? A working environment is complex and there are many alternatives and ways to achieve a mission. Our job is to identify the things that could lead to max performance and guide our team to those.<br>Some examples of things that we need to do in this step: <br>- Identifying and removing the roadblocks that stop the progression.<br>- Set the path for progression.<br>- Provide areas of technical skills development that we know the person we are coaching will need.<br>In this step, we shouldn’t go into the details but the big building blocks that will lead to our mission. Break down a quarter into deliverables, take a view of the whole year for your employee and see what areas of growth they need to develop.</li><li><strong>From potential to performance:</strong><br>This phase is the “doing” part, we have a goal and a path, let’s get it done! Our team or colleague starts the journey. <br>This is where, as managers, we create an environment to develop performance and Feedback is one of the primary tools to achieve this. Thanks to the use of feedback we can:<br>- <strong>Course correct:</strong> What if something unexpected happened, what if the plan that we laid had some hypothesis that hasn’t proven to be correct. Our role is to give a view from the outside of what they need to adapt and provide guidance on how they could change the plan to achieve success.<br>- <strong>Hold team and individuals accountable:</strong> Humans are driven to a goal. We achieve the best out of us when we have a means, a drive to achieve our mission. But the journey is tough. When the tougher gets tough a sends of accountability and commitment leads to persevere to achieve the goal. We as managers or coaches are the ultimate holders of someone’s sense of accountability.</li><li><strong>Bring perspective to grow even further:</strong><br>When we get there, we need to revisit the whole picture again. What have we achieved? What can be improved further? What new areas of development do we want to tackle next? <br>Manager and employee, team, we sit together and we run a postmortem of the whole cycle. That way we get ready for the next chapter. We get ready to re-engage in a new cycle, we begin to define the next step of the mission.<br>This phase is really important. As an example, a team may not accomplish the mission that they set out to do, but in this phase, we do a postmortem of all the lessons learned so we can improve.</li></ol><h3>Defining effective feedback</h3><p>Feedback is an open dialogue that happens every day or when appropriate.<br>It is driven through guidance and encouragement, and as any dialogue:</p><ul><li>Feedback is not unidirectional, we give and receive.</li><li>Feedback should have positive intent.</li></ul><p>Positivity is crucial in feedback. <br>As an example, you may seem some behavior or actions that you don’t think were ok. Nevertheless, it is really important that we assume that the person executing was trying to do the best they could.</p><p><strong>Effective feedback is not law enforcement or disciplinary action, nor it is an opportunity to bent your emotions or to tell people what they did wrong.</strong></p><p>Feedback is a gift, an opportunity to bring the performer back on track on their path to success. Feedback is based on trust, it must fit on a culture of openness where team members can truly be themselves without fear of failure. Therefore feedback can never be a tool of shaming.</p><p>That’s it for this post, in this one we talked about “the why” and “the when” of feedback. In the coming blogs, we will speak more about “the how”. <br>Thanks for reading!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4241cdb7c245" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/mastering-feedback-part-1-feedback-and-how-it-fits-into-a-performance-driven-culture-4241cdb7c245">Mastering Feedback — Part 1: Feedback and how it fits into a performance-driven culture</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ First Month at Trainline ]]>
      </title>
      <link>https://engineering.thetrainline.com/first-month-at-trainline-202f6ebfc91d?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/202f6ebfc91d</guid>
      <category>
        <![CDATA[ devops ]]>
      </category>
      <dc:creator>
        <![CDATA[ Tom Westbrook ]]>
      </dc:creator>
      <pubDate>Fri, 06 Dec 2019 09:23:03 GMT</pubDate>
      <atom:updated>2019-12-11T12:05:52.210Z</atom:updated>
      <content:encoded>
        <![CDATA[ <h3>Our First Month at Trainline</h3><p>By Tom Westbrook &amp; Daniel Blake</p><p>Hi! We’re Tom Westbrook and Daniel Blake we’re both recent graduates in Computer Science/Computing from The University of Lincoln/University of Greenwich and we started working at Trainline in September 2019 in th ]]>
        <![CDATA[ e Platform Delivery Team.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8vHfUBgwPg6F57Pm_lLkgQ.png" /></figure><p><strong>The Roles:</strong></p><p><strong>Tom</strong></p><p>My role is Graduate Platform Operations Engineer; this means I work within the Platform Operations team to aid the reliability, major incident recovery process and maintain monitoring &amp; alerting tools for all developer teams within the business. Working in Platform Ops I will get the opportunity to learn the whole scope of Trainline Infrastructure and will be able to further build my skills in the area of Platform Ops which I desire to once all day to day tasks have been covered.</p><p>The role comes with the responsibility of keeping an eye on the health of the hundreds of services we maintain some of which get 10s of thousands of requests every minute. Additionally, this comes with the burden of dealing with incidents. Though they are few and far between, when they do happen it is all hands on deck for me and the team, working with multiple different developer clusters simultaneously to restore the platform to full health.</p><p><strong>Dan</strong></p><p>My role is Graduate Cloud Capacity Analyst within the team known as <em>The Watch </em>(The team in charge of cloud capacity and infrastructure analysis); This mainly involves creating tools using Python in PyCharm to analyse data from AWS (Amazon Web Services) and other cloud resources, to ensure that Trainline are utilizing the cloud effectively, as well as regulate the company’s overall spend on these services. From this role, I hope to continue to expand my technical knowledge, and I feel like Trainline is the best place for that thanks to the training schemes and mentor programs they have in place.</p><p><strong>Applying to Trainline:</strong></p><p><strong>Tom</strong></p><p>Both myself and Dan applied to the same role here at Trainline though only one of us could take the role. The interview team were so impressed by both of us that they wanted to employ the two of us. Due to Trainline’s flexible mentality to job roles and openness for trying people in different positions they saw that my skill set might be more suited to a role in the Platform Operations team who were looking to fill their final space in the team of Platform Operations Engineers.</p><p>I then went on for a technical test and interview with the head of this team and was fortunate enough to be offered the graduate-level job in the following days. Since starting the role, I have managed to fit very comfortably into the team and role, learning new skills every day. All I can say is that the interview team were completely right in putting me forward for the Platform Ops role as I have not once thought about if I would be better off in Dan’s role.</p><p><strong>Dan</strong></p><p>I had 3 interviews; a phone call, an in-office interview with the interview team, and a final interview with a few stakeholders in the wider Platform team. The interviews were relaxed and included questions regarding issues I had dealt with previously, and if I “Would you rather fight a man-sized duck, or 100 normal sized ducks”.</p><p>There are many great things about working at Trainline which we have discovered in the first few months of working at Trainline:</p><ul><li><strong>Mentor Schemes:</strong> Our CEO Clare Gilmartin hosted an event about the importance of a mentor and introduced us to our own mentor who helped her get where she is today. we were both given mentors when joining the company as we are Graduates, but the mentor scheme is open to all at Trainline to be both mentors and mentees.</li><li><strong>A place of learning: </strong>We’ve both been given the ability to further develop our skills and learn new techniques using Coding Dojo and other learning courses to help us with our careers. There is also the opportunity to go to seminars for various software we use (I.e. New Relic, AWS); to learn how best to use these tools and meet others in similar roles to exchange knowledge.</li><li><strong>Weekly Wins: </strong>A chance to learn about the great work we and others have done at Trainline, as well as grab a slice of pizza and a beer to celebrate!</li><li><strong>Give &amp; Gain: </strong>This offers us a chance to take a day to give back to the community and help various charities. Some people have had the chance to volunteer at Five-sister’s Zoo, waterproofing and giving some of the exhibits a fresh lick of paint, whereas others got to help with salsa dancing classes at a community centre.</li><li><strong>Great Perks: </strong>Brilliant food shops and stalls around the area (including a large food market where you can find lunch meals from every continent, you will never go hungry!), free soft drinks, free toast, cereal and fruit every morning. There is also a foosball table, video games (including FIFA) and ping pong tables</li><li><strong>Chance to work with fresh tech: </strong>Including shiny laptops, and the chance to work with cloud technologies! We also work with tools like Terraform, Puppet, AWS, New relic and many more!</li><li><strong>Clubs: </strong>Zen Club (Weekly meditation sessions), Yoga classes, board games, 5-a-side football and more. There are also many slack channels to get involved with, including Payday-blowout for organising nights out for Payday</li></ul><p><strong>Managing the work/life balance</strong>:</p><p><strong>Tom</strong></p><p>For me working at Trainline is my first 9–5:30 office job which along with an hour commute, recently moving to London and training with London Rowing Club 10 times a week, finding the best balance has not been easy. Thankfully the team at Trainline has been very welcoming and understanding of the pressures all this includes.</p><p><strong>Dan</strong></p><p>I’ve worked as an intern before at another company, so this is my second office job. Trainline is very accommodating with working hours, and even allow us to work from home if we need too. As I come from the south-east, this is particularly handy when I have an appointment I need to get too.</p><p>The future looks bright for us both here at Trainline as we begin to build our careers from within Europe’s leading train and coach app.</p><p>Come and join the team — <a href="http://www.thetrainlinejobs.com/">http://www.thetrainlinejobs.com/</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=202f6ebfc91d" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/first-month-at-trainline-202f6ebfc91d">First Month at Trainline</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[ Using Agile principles ​to improve your productivity​ ]]>
      </title>
      <link>https://engineering.thetrainline.com/using-agile-principles-to-improve-your-productivity-b2312523552b?source=rss----f07861640744---4</link>
      <guid isPermaLink="false">https://medium.com/p/b2312523552b</guid>
      <category>
        <![CDATA[ agile ]]>
      </category>
      <category>
        <![CDATA[ lean-thinking ]]>
      </category>
      <dc:creator>
        <![CDATA[ Juan Antonio Vicaria ]]>
      </dc:creator>
      <pubDate>Thu, 15 Aug 2019 13:59:50 GMT</pubDate>
      <atom:updated>2019-08-15T13:59:50.149Z</atom:updated>
      <content:encoded>
        <![CDATA[ <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*q3YjhB4QmDQpHA237jySUg.png" /></figure><h3>Introduction</h3><p>Many times when I talk to people, they raise a common issue, lack of time:</p><blockquote>I am stretched…</blockquote><blockquote>I don’t have time to do all the things that I’m asked to do.</blockquote><p>It takes me back to 2015 when I was promoted to Technical Lead. Up to that point, as a Senior developer, my responsibilities were quite clear: coding, reviews, technical designs…</p><p>In my new role, some things were a bit more confusing. I was getting random requests from random people, all wanting very urgent and important things: <em>What should I do next? What is more important? Am I responsible for that?<br></em>Very quickly tasks started piling up, I wasn’t able to satisfy everyone that needed my help.</p><p>The same way I learned how to be a better developer, I decided to take action and learn how to improve my time management.</p><p>Very quickly something appeared in the literature again and again: <strong><em>Lean Thinking</em></strong>.<br>In this post, I want to share what I learned and has helped me in my career ever since.</p><h3>Lean Thinking</h3><p>Lean Thinking was developed by Toyota and it put the company in the top spot in the world. The goal is to maximize <strong>customer value</strong> while minimizing waste. It does that by focusing on the following:</p><ul><li><strong>Reducing waste: </strong><br>Waste translates to lost time doing activities that don’t give customer value. There are different types of waste defined in Lean thinking.</li><li><strong>Flow:</strong> <br>Traditional work is done in “batch-and-queue” fashion. A number of items are produced in one department and sent to another department. Lean advocates for a different model where items flow seamlessly from one part to another. The goal to deliver the minimum required at any point in time to maximize customer value.</li><li><strong>Visualization</strong>: <br>By inspecting your value delivery process, you can inspect problems in the process so we can optimize it.</li><li><strong><em>Kaizen</em>, improve: </strong><br>The Japanese word for <em>improvement</em>. Change for the better. Continuous improvement. Fail fast. Iterate and learn.</li></ul><p>Lean has been used in manufacturing for many years and it has inspired the way we build software. But it can be used for many aspects, even in your personal work. I will explain how we can use these elements of Lean Thinking to maximize your productivity.</p><h3>What’s your work?</h3><p>Let’s go back to 2015, my first job as a Technical Lead. One of my biggest issues was that I didn’t even know what my work was. I could either wait months and months and perhaps figure out at the end what my work was, or, I could reflect on what the essence of my work was. <br>In order to do that I decided to identify <em>my customers</em> and <em>what they expected from me</em>. I achieved that by creating a <em>Customer-Value map. </em>Let’s create one from scratch. <br>In the center, I add myself and around me, I add my “customers”, people who expect something from me.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/434/1*vYmCT1UKm7JosRHg1BNJPg.png" /><figcaption>What my team expects from me</figcaption></figure><p>I have started with my Team. Just below it, I write the things that they expect from me. For example, they expect to have a Healthy backlog so that there is no stop and wait. Also, they expect that I help them unblocking issues, and they want to continuously improve. <br>Let’s add another example:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/667/1*LIILG_e0DdQnVTQqUlO0pg.png" /><figcaption>Another one of my customers, a colleague that I line manage.</figcaption></figure><p>A colleague that I line-manage needs my help to: progress in their career; networking, so that they meet people that will help in the future; and admin work, like approving their holidays.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/688/1*Bn0PDQPl2Fo3D1nTn7LSuA.png" /></figure><p>Let’s add more customers, including my manager and the Product owner of my team.</p><p>One of the key factors is that I didn’t put specific tasks that I need to perform with my customers, I just added the value that they expect from me.</p><p>This representation helped a lot to make really clear who I was serving and what they required from me.</p><h3>Prioritizing your work</h3><p>Now that we know what value we need to deliver, the next big thing to deal with is prioritizing the different tasks that will lead to that value.</p><p>If you ever feel like you don’t know what to do next, don’t feel bad… Prioritizing is hard. We always want to do everything at the same time, everything looks important.</p><p>Let’s look at different ways that we use to prioritize our work.</p><h4>Value vs Effort</h4><p>Every time I get a task to be done a visualize my backlog in a graph like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/494/1*SI9QQymJP0BDUII2R54lvw.png" /><figcaption><a href="https://www.nngroup.com/articles/prioritization-matrices/">https://www.nngroup.com/articles/prioritization-matrices/</a></figcaption></figure><p>We want to work on the highest value and lowest effort first. From time to time, you will have to pick a high value and high effort task, but be mindful about always working on complicated things, there may be an easier way to solve that problem...</p><p>One thing about high effort work: use the divide and conquer technique, break down complex work in smaller chunks so they are no longer complicated.</p><h4>Important vs Urgent</h4><p>Another way to prioritize work is based on <strong>Importance</strong> vs <strong>Urgency</strong>.<br><strong>The Importance</strong> of something is related to <strong>how valuable</strong> something is, the more Important a task is the more valuable it is.<br><strong>The Urgency</strong> of something relates to <strong>when it needs</strong> to be done, so it is related to time, the more urgent a task is the sooner it needs to be done.<br>There are two issues here:</p><ul><li>Many people confuse them and mix them up. They think that only urgent tasks are important.</li><li>Many people thrive working only in urgent tasks. I don’t know if it is the adrenaline that our body generates or the sense of being a hero.</li></ul><p>I don’t enjoy working only on urgent things:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/657/1*MGJR7jk4q-CV3RUYZaeoJA.png" /></figure><p>If you work only on the Urgent things, you don’t have time to get ready so it leads to low quality and poor execution. I always try to move away from Urgent tasks and try to focus on the Important things that are not urgent.<br>Let’s see an example:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/644/1*DbDsH2-8CJO24bIev68Ccg.png" /></figure><p>There has been an alert, some machine is running with high CPU. This has led to some downtime of an application.<br>It is really <strong>urgent</strong> and <strong>important </strong>to stop the alert and we can quickly do that by increasing the number of servers running the application.<br>Going forward something perhaps more important is to look into the process and see where the performance of the app is degrading. It is <strong>not as urgent</strong> but it will stop further urgent problems creeping up.</p><h3>Visualizing your work</h3><p>If we rely on our memory to remember things, I can guarantee that some important things won’t get done. Also, the cognitive effort to keep things in short term memory makes it really hard on us.<br> Some people overcome this by using post-its in their desks, placing to-do list next to them…<br>I do write many things on my hand so that I can remember to do it. We even keep loads of tabs opened so that we can remember to do something.</p><p>There is a saying: <em>out of sight, out of mind</em>. We think that if we see it all the time we won’t forget it. Ironically the things that you pile up around you eventually become invisible. Check some of the post-its that you have next to you right now, I bet they are not relevant anymore.<br>The key to effective visualization is to create a system that makes your work easily visible so that you can see at a glance what needs to be done.</p><h4>Personal Kanban</h4><p>One of the techniques that we use to manage work in teams is Kanban.<br>Why not use it for your personal work?</p><p>Kanban is based on two principles:</p><ul><li>Limit the work in progress.</li><li>Visualize your flow.</li></ul><p>Like many people, I use Trello boards to organize my work. This is how my current Trello Board looks like:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/834/1*QjRv3oIz0MYWWI6ai4bAGg.png" /><figcaption>My Kanban board</figcaption></figure><ol><li><strong>Inbox: <br></strong>When I have a new idea on how to deliver value or some of my customers asks me for something, I add a Trello task with as much information as I have at that time and put it in the <em>Inbox</em> column.</li><li><strong>Priority</strong>: <br>From time to time I pull something from <em>Inbox</em> and add it to the <em>Priority</em> column. This is the equivalent of a sprint backlog. Work in there needs to be refined and ready to be worked on. The work there needs to be prioritized properly. I also limit this column to 10 items so that I can refine just enough work.</li><li><strong>In progress: </strong><br>I limit my work in progress to 2 items.</li><li><strong>Need feedback: </strong><br>It is important that you are able to visualize your flow. As part of my role, many times I don’t do tasks myself but I may have to delegate some work. I may also have to create a report and wait for someone to review. I will move a task to the<em> Need feedback</em> column when I need to validate with someone. <br>I also limit the number of items here to 10. That way I force myself to do something about it. Otherwise, things will pile up here and I won’t make enough effort to complete things. There is a mantra that sticks in my mind:</li></ol><blockquote>Start finishing, stop starting.</blockquote><p><strong>5. To Retro:</strong><br>Retro is my equivalent to the “Done” column. There is a key difference though, something is not done until we take a look at what we learned from it. Every time we do something we need to understand if we could have done something better or actually we tried something and it worked great. That’s what <em>Kaizen</em> is about. If we do things the same way all the time, we’d never get better.</p><p><strong>6. Archive:</strong><br>When I’m finally done with something I move it to Archive.</p><h3>Conclusion</h3><p>If you want to take one idea from this blog, please keep this:</p><blockquote>If you manage your time carefully…</blockquote><blockquote>…you can achieve whatever you want.</blockquote><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b2312523552b" width="1" height="1" alt=""><hr><p><a href="https://engineering.thetrainline.com/using-agile-principles-to-improve-your-productivity-b2312523552b">Using Agile principles ​to improve your productivity​</a> was originally published in <a href="https://engineering.thetrainline.com">Trainline’s Team Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p> ]]>
      </content:encoded>
    </item>
  </channel>
</rss>